#ifndef _PARAM_H
#define _PARAM_H

#include <stdlib.h>
#include <stdio.h>
#include <sys/timeb.h>

const int blosum62[32][32] = { { 4, -2, 0, -2, -1, -2, 0, -2, -1, -1, -1, -1, -2, -1, -1, -1, 1, 0,
		0, -3, 0, -2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, { -2, 4, -3, 4, 1, -3, -1, 0, -3, 0, -4, -3,
		3, -2, 0, -1, 0, -1, -3, -4, -1, -3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, { 0, -3, 9, -3, -4,
		-2, -3, -3, -1, -3, -1, -1, -3, -3, -3, -3, -1, -1, -1, -2, -2, -2, -3, 0, 0, 0, 0, 0, 0, 0,
		0, 0, }, { -2, 4, -3, 6, 2, -3, -1, -1, -3, -1, -4, -3, 1, -1, 0, -2, 0, -1, -3, -4, -1, -3,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, { -1, 1, -4, 2, 5, -3, -2, 0, -3, 1, -3, -2, 0, -1, 2, 0,
		0, -1, -2, -3, -1, -2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, { -2, -3, -2, -3, -3, 6, -3, -1, 0,
		-3, 0, 0, -3, -4, -3, -3, -2, -2, -1, 1, -1, 3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, { 0, -1,
		-3, -1, -2, -3, 6, -2, -4, -2, -4, -3, 0, -2, -2, -2, 0, -2, -3, -2, -1, -3, -2, 0, 0, 0, 0,
		0, 0, 0, 0, 0, }, { -2, 0, -3, -1, 0, -1, -2, 8, -3, -1, -3, -2, 1, -2, 0, 0, -1, -2, -3,
		-2, -1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, { -1, -3, -1, -3, -3, 0, -4, -3, 4, -3, 2, 1,
		-3, -3, -3, -3, -2, -1, 3, -3, -1, -1, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
		{ -1, 0, -3, -1, 1, -3, -2, -1, -3, 5, -2, -1, 0, -1, 1, 2, 0, -1, -2, -3, -1, -2, 1, 0, 0,
				0, 0, 0, 0, 0, 0, 0, }, { -1, -4, -1, -4, -3, 0, -4, -3, 2, -2, 4, 2, -3, -3, -2,
				-2, -2, -1, 1, -2, -1, -1, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, { -1, -3, -1, -3, -2,
				0, -3, -2, 1, -1, 2, 5, -2, -2, 0, -1, -1, -1, 1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0,
				0, 0, 0, }, { -2, 3, -3, 1, 0, -3, 0, 1, -3, 0, -3, -2, 6, -2, 0, 0, 1, 0, -3, -4,
				-1, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, { -1, -2, -3, -1, -1, -4, -2, -2, -3, -1,
				-3, -2, -2, 7, -1, -2, -1, -1, -2, -4, -2, -3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, {
				-1, 0, -3, 0, 2, -3, -2, 0, -3, 1, -2, 0, 0, -1, 5, 1, 0, -1, -2, -2, -1, -1, 3, 0,
				0, 0, 0, 0, 0, 0, 0, 0, }, { -1, -1, -3, -2, 0, -3, -2, 0, -3, 2, -2, -1, 0, -2, 1,
				5, -1, -1, -3, -3, -1, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, -1, 0, 0, -2, 0, -1, -2, 0, -2, -1, 1, -1, 0, -1, 4, 1, -2, -3, 0, -2, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, }, { 0, -1, -1, -1, -1, -2, -2, -2, -1, -1, -1, -1, 0, -1, -1, -1,
				1, 5, 0, -2, 0, -2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
		{ 0, -3, -1, -3, -2, -1, -3, -3, 3, -2, 1, 1, -3, -2, -2, -3, -2, 0, 4, -3, -1, -1, -2, 0,
				0, 0, 0, 0, 0, 0, 0, 0, }, { -3, -4, -2, -4, -3, 1, -2, -2, -3, -3, -2, -1, -4, -4,
				-2, -3, -3, -2, -3, 11, -2, 2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, { 0, -1, -2, -1,
				-1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, 0, 0, -1, -2, -1, -1, -1, 0, 0, 0,
				0, 0, 0, 0, 0, 0, }, { -2, -3, -2, -3, -2, 3, -3, 2, -1, -2, -1, -1, -2, -3, -1, -2,
				-2, -2, -1, 2, -1, 7, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
		{ -1, 1, -3, 1, 4, -3, -2, 0, -3, 1, -3, -1, 0, -1, 3, 0, 0, -1, -2, -3, -1, -2, 4, 0, 0, 0,
				0, 0, 0, 0, 0, 0, }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, { 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, { 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, { 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, }, {
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, } };
struct cudaProp{
	int CC;
	int SMXCount;
};

class Param{
	public:
		Param(int argc, char* argv[]):
			micNum(-1),
			cudaNum(-1),
			cpuNum(-1),
			gapOpen(10),
			gapExtend(2),
			dbPath(NULL),
			queryPath(NULL),
			topNum(10),
			micAvailable(0),
			cudaAvailable(0),
			cpuAvailable(0)
		{
			for(int i = 1; i != argc; ++i){
				if(argv[i][0] == '-'){
					switch(argv[i][1]){
						case 'p':
							micNum = atoi(argv[i+1]);
							break;
						case 'g':
							cudaNum = atoi(argv[i+1]);
							break;
						case 'c':
							cpuNum = atoi(argv[i+1]);
							break;
						case 'o':
							gapOpen = atoi(argv[i+1]);
							break;
						case 'e':
							gapExtend = atoi(argv[i+1]);
							break;
						case 'd':
							if(argv[i][2] == 'b'){
								dbPath = argv[i+1];
								printf("db path %s\n", dbPath);
							}
							break;
						case 'q':
							queryPath = argv[i+1];	
							printf("query path %s\n", queryPath);
							break;
						case 't':
							topNum = atoi(argv[i+1]);
							break;
						default:
							printf("out %d %s\n", i, argv[i]);
							printUsage();
					}
				}
			}
			gapOE = gapOpen + gapExtend;
			for(int i = 0; i != 32; ++i){
				for(int j = 0; j != 32; ++j){
					matrix[i][j] = blosum62[i][j];
					plain_matrix[i * 32 + j] = blosum62[i][j];
				}
			}
			sysConf();
		}
		
		~Param(){
			delete cudaProps;
		}
		void startTimer(){
			ftime(&progStartTime);
		}

		inline double getTime(timeb startTime, timeb endTime){
			return (endTime.millitm - startTime.millitm) / 1000.0 + (endTime.time - startTime.time);
		}

		inline double getGlobalTime(timeb curTime){
			return getTime(this->progStartTime, curTime);
		}

		void printUsage(){
			printf("Usage: -db <protein database>\n-q <query sequence file>\n");
			exit(-1);
		}

		void validate(){

		}

		void setReservedCPUCores(int num){
			cpuReservedCores = num;
		}

		void sysConf();
		
	public:
		int micNum;	
		int cpuNum;
		int cudaNum;
		int cpuReservedCores;
		int gapOpen;
		int gapExtend;
		int gapOE;	
		char* dbPath;
		char* queryPath;
		int topNum;
		int micAvailable;
		int cpuAvailable;
		int cudaAvailable;
		int matrix[32][32];
		int plain_matrix[32 * 32];
		timeb progStartTime;
		cudaProp* cudaProps;
};

#endif
